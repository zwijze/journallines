<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <title>Using the Binding Compiler</title>
</head>
<body class="composite">
<div id="bodycol">
<div class="app">
<div class="h3">
<h3><a name="binding"></a>Running the compiler directly</h3>

<p>Once you have a binding definition, you need to compile the bindings into your
class files with the JiBX binding compiler. The easy way to do this is to run
the binding compiler straight from the supplied <i>jibx-bind.jar</i> file in the
<i>/lib</i> directory of the distribution. For instance, if the JiBX installation
is in <i>/home/dennis</i> and you're in the root of your application's class file
directory with a binding file named <i>binding.xml</i> you can just run:</p>

<div id="source"><pre>java -jar /home/dennis/jibx/lib/jibx-bind.jar binding.xml</pre></div>

<p>JiBX will automatically include the current directory in the class load path
when you run it this way. It'll need to have access to all the classes included
in the binding definition, though, along with any superclasses of those classes,
so you may need to include other class load root directories or jar files in the
classpath. Unfortunately, this won't work properly when you run the binding compiler
directly from the jar. You instead need to specify the compiler class directly,
and include the <i>jibx-bind.jar</i> in your classpath as follows (in a single
line, shown split here only for formatting):</p>

<div id="source"><pre>java -cp .:lib/support.jar:/home/dennis/jibx/lib/jibx-bind.jar
    org.jibx.binding.Compile binding.xml</pre></div>

<p>As when the binding compiler is run directly from the jar, you need to have the
<i>jibx-bind.jar</i> file in the same directory as the other jar files from the
<i>/lib</i> directory of the distribution for this to work correctly. Note that
this is the Unix/Linux version of the command line; if you're running Windows or other
DOS-based systems you'll need to reverse the slashs and use ';' instead of ':'
as a path separator character.</p>

<p>Without any options, the JiBX binding compiler won't print anything to the
console unless there's an error in compiling the bindings. If you want to see a
detailed list of classes modified or generated by the binding compiler you can
pass an option of <code>-v</code> at the start of the arguments. This will output
a listing of all classes included in the bindings, along with actual method
information for each class (the methods and classes added by JiBX are easy to
spot, since they all have names starting with &quot;JiBX&quot;).</p>

<p>If you just want to validate the modified or generated classes without a
detailed listing you can use an option of <code>-l</code>. This test-loads the
effected class files into the JVM as the binding compiler is running. If it
operates without an error you can be sure that the generated code obeys the rules
enforced by the JVM specification. It's normally not necessary to take this step,
but it serves as a good check if you encounter any class loading errors when
using the code modified by JiBX. Any error reported with this option indicates
a problem within the JiBX binding compiler operation. If this occurs you should
check the <a href="http://jira.codehaus.org/secure/BrowseProject.jspa?id=10410">Jira
issue tracking system</a> and create a new issue describing the circumstances of
the error if it's not a duplicate of an existing issue. You can also check the <a
href="http://www.jibx.org/status.html#problems">Status page</a> of the web site
first to see if there's already a fix for the problem.</p>

<p>You can rerun the binding compiler at any time, and <i><b>must</b></i> rerun
the binding compiler if you recompile any of the bound classes. If your class
files have not been recompiled and the bindings haven't changed since the last
time you ran the binding compiler it won't modify any of the classes. If you do
change either the class files or the binding
definitions only those classes effected by the change will be modified.</p>

</div>
<div class="h3">
<h3><a name="task"></a>Binding compiler Ant task</h3>

<p>If you're using Ant as a project build tool JiBX provides an even easier
way of running the binding compiler, by using a custom Ant task. To make use of
this in your Ant <i>build.xml</i> file you'll first need to add a custom task
definition like this (with the <i>jibx-lib</i> property set to the appropriate
path to the <i>lib</i> directory of your JiBX installation - but note that some
versions of Ant may not work properly if the JiBX installation path contains a
space character):</p>

<div id="source"><pre>  &lt;!-- JiBX binding compiler task definition --&gt;
  &lt;taskdef name="bind" classname="org.jibx.binding.ant.CompileTask">
    &lt;classpath>
      &lt;fileset dir="${jibx-lib}" includes="*.jar"/>
    &lt;/classpath>
  &lt;/taskdef>
</pre></div>

<p>Then you'll be able to invoke the binding compiler during the build process
like this:</p>

<div id="source"><pre>  &lt;!-- Run JiBX binding compiler --&gt;
  &lt;bind verbose=&quot;true&quot; load=&quot;true&quot; binding=&quot;binding.xml&quot;&gt;
    &lt;classpathset dir=&quot;classes&quot;/&gt;
  &lt;/bind&gt; 
</pre></div>

<p>One issue to note with the Ant task is that if you're using default values
you'll need to include the <i>jibx-run.jar</i> from the distribution in the
classpath passed when you invoke the task:</p>

<div id="source"><pre>  &lt;!-- Run JiBX binding compiler --&gt;
  &lt;bind verbose=&quot;true&quot; load="true" binding=&quot;binding.xml&quot;&gt;
    &lt;classpath>
      &lt;pathelement path="classes"/>
      &lt;pathelement location="${jibx-lib}/jibx-run.jar"/>
    &lt;/classpath>
  &lt;/bind&gt; 
</pre></div>

<p>Here's the full description of the attributes and nested elements supported
by the JiBX Ant task:</p>
      <table cellpadding="3" cellspacing="2" border="1" width="100%">
		  <tr class="b">
		    <th>Attribute</th>
		    <th>Description</th>
		    <th>Required</th>
		  </tr>
		  <tr class="a">
		    <td valign="top">verbose</td>
		    <td valign="top">Flag for JiBX compiler output.</td>
		    <td valign="top" align="center">No</td>
		  </tr>
		  
		   <tr class="b">
		    <td valign="top">load</td>
		    <td valign="top">Flag to specify whether or not to load generated files.</td>
		    <td valign="top" align="center">No</td>
		  </tr>
		
		   <tr class="a">
		    <td valign="top">binding</td>
		    <td valign="top">Single binding file</td>
		    <td valign="top" align="center">No*</td>
		  </tr>
		
		   <tr class="b">
		    <td valign="top">bindingfileset</td>
		    <td valign="top">FileSet of binding files</td>
		    <td valign="top" align="center">No*</td>
		  </tr>
		
		   <tr class="a">
		    <td valign="top">classpathset</td>
		    <td valign="top">FileSet for bound class files</td>
		    <td valign="top" align="center">Yes</td>
		  </tr>
      
      <tr><td colspan="3">* - either <i>binding</i> or <i>bindingfileset</i>
      must be supplied</td></tr>
		</table>

</div>
<div class="h3">
<h3><a name="maven2">Maven plugin</h3>

<p>The <a href="%maven%">Maven JiBX
Plugin</a> supports running the JiBX binding compiler as part of your Maven
project. See the linked page for details.</p>

</div>
<div class="h3">
<h3><a name="eclipse-use"></a>Binding with Eclipse</h3>

<p>If you're using Eclipse as your IDE, the <a href="%eclipse%">Eclipse plugin</a> lets
you easily integrate the JiBX binding step into your development. Note that the plugin
typically lags in support for the latest version of JiBX, though, so if you need to use
the latest JiBX code you may be better off using an alternative approach (such as described
in the <a href="#ide-use">Binding with other IDEs</a> topic, below). See the
<a href="%eclipse%">Eclipse plugin</a> page for full details of the plugin.</p>

</div>
<div class="h3">
<h3><a name="intellij-use"></a>Binding with IntelliJ IDEA</h3>

<p>If you're using IntelliJ IDEA as your IDE, the
<a href="http://plugins.intellij.net/plugin/?id=239">IDEA JiBX Plugin</a> will
integrate the binding step into your development, including binding validation
support. See the linked page for details.</p>

</div>
<div class="h3">
<h3><a name="ide-use"></a>Binding with other IDEs</h3>

<p>Running the JiBX binding compiler can be a problem when using IDEs without
plugin support, since
IDEs generally assume that they have total control over the compiled class
files. If the IDE overwrites a class file which has been modified by the JiBX
binding compiler the binding will no longer be usable. The solution is just to
run the binding compiler again - but having to do that manually every time the
IDE modifies the files can be painful, especially if the binding compiler cannot
be run from inside the IDE.</p>

<p>Fortunately, most modern IDEs offer support for using Ant builds. If you
include an Ant <i>build.xml</i> as part of your project, you can generally run a
target within that build easily from your IDE. This technique works especially
well if you set up a separate Ant build file with the binding compiler executed
by the default target. There's a sample of this approach in the <i>starter</i>
example provided in the JiBX distribution, which includes both a normal Ant
<i>build.xml</i> with all the steps needed to build the project, and a separate
<i>build-binding.xml</i> Ant build file intended for easy use of the binding
compiler within an IDE. The remainder of this section uses the starter project
to illustrate running the binding compiler through Ant within Eclipse.</p>

<div class="h4">
<h4>Running an Ant target within Eclipse</h4>
<p>It's reasonably easy to run an Ant target in a <i>build.xml</i> file within
an Eclipse project. You can right-click on the <i>build.xml</i> file to get a
context menu, select the <b>Run As</b> item, and the <b>Ant Build...</b> (click on this
image for a full-size image):.</p>
<a href="./images/eclipse-run1.gif"><img src="./images/eclipse-run1-small.gif" width="490" height="383" alt="Run Ant build target from Eclipse"></a>

<p>This brings up a dialog box, which allows you to select the specific build
target to be executed, as shown below:</p>
<a href="./images/eclipse-run2.gif"><img src="./images/eclipse-run2-small.gif" width="490" height="383" alt="Select Ant build target to be executed"></a>

<p>You can also use a separate Ant build for the JiBX binding compiler step,
making the binding compiler target the default target for the build. This makes
it simpler to run the target from Eclipse, since you can avoid the target
selection dialog step from the above sequence. Just select <b>Run As</b> and then
<b>Ant Build</b> from the context menu for the build file:</p>
<a href="./images/eclipse-run3.gif"><img src="./images/eclipse-run3-small.gif" width="490" height="384" alt="Run default Ant build target from Eclipse"></a>

<p>This approach is flexible, in that you can run the binding compiler any time
you want. It does require you to take a manual action to trigger the execution,
but remember that you only need to run the binding compiler when you're actually
going to use the bindings (as part of your debugging, for instance).</p>

</div>

<div class="h4">
<h4>Defining a build step in Eclipse</h4>
<p>Besides running an Ant target on command, you can make the execution of one
or more targets from an Ant build part of the normal build of your project. To
do this, go to the project properties (from the right-click context menu on the
project name, or from the <b>File</b> menu with the project name selected) and select
the <b>Builders</b> pane. From this you can then add an Ant build as a new
builder for the project:</p>
<a href="./images/eclipse-build1.gif"><img src="./images/eclipse-build1-small.gif" width="490" height="381" alt="Add an Ant builder to a project"></a>

<p>Just clicking <b>OK</b> brings up the builder properties dialog. On this dialog
you can change the name of the builder from the default, and then click on
<b>Browse Workspace...</b> under the <b>Buildfile</b> path to bring up a selection
dialog:</p>
<a href="./images/eclipse-build2.gif"><img src="./images/eclipse-build2-small.gif" width="490" height="383" alt="Select the Ant build file"></a>

<p>By default, an Ant builder will only run the default target for the
build. If running the binding compiler is not the default target for the build,
you can go into the <b>Targets</b> tab of the dialog to change the target to be run
by the builder:</p>
<a href="./images/eclipse-build3.gif"><img src="./images/eclipse-build3-small.gif" width="490" height="384" alt="Select the Ant targets to be run"></a>

<p>This step needs to be done for each form of activation of the builder (the
different areas within the <b>Targets</b> tab). By setting the appropriate
target for <b>After a "Clean"</b> the builder will be run everytime you execute
a <b>Clean...</b> build (from the <b>Project</b> menu). This is especially
useful for working on projects with other developers, where a clean build is
</p>

<p>You can also set the target for <b>Auto Build</b> in order to run the binding
compiler step every time a file is automatically recompiled by Eclipse, but this
setting can be very intrusive. Since you only need to run the binding compiler
when one of the classes included in the binding is modified, it's generally
easier to just run the binding Ant build directly (using the <b>Run As</b>
technique, described in the previous section) as needed, while using the builder
approach to apply the binding on clean builds of the project.</p>

</div>

</div>
</div>
</div>
</body>
</html>
